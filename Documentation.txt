STUFF: 

match
-----
match is a control flow operator used for pattern matching. It works similarily to switch in C++,
used to match complex patterns, including enums, results, and custom types.
Ok(_) : _ means ignore the value
Err(e) : e captures the error message and prints it

It is equivalent to using 'if let'

if let Err(e) = adb::check_adb() {
    eprintln!("Error : {}", e);
} else {
    println!("ADB is available)
}


Shell Commands
--------------
Command	Description
"uptime"    Total uptime of the device(s) connected
"ls /sdcard"	List files on the device’s internal storage
"pm list packages"	List installed apps
"dumpsys battery"	Get battery status
"getprop ro.build.version.release"	Get Android version


I'll use `adb exec_out screencap -p` to get the devices screen as a raw PNG image.
Implement PNG/JPEG Parsing in `video.rs`
Parse Screenshot into PNG/JPEG 
I'll use `tokio` and `warp` crates to create a WebSocket server.


# Final Flow
video::start_video_stream(tx.clone()) sends frames into tx.

network::start_websocket_server(tx.clone()) handles WebSocket connections.

Each WebSocket connection calls handle_connection, where:

rx receives frames.

ws_sender.send() sends them to the client.

The frontend receives real-time video frames via WebSocket.


sdl2: I'll be using sdl2 crate to stream the screen 
(Why not sdl3? , the official Rust bindings as of April 2025 only supports sdl2, if I want to use sdl3 I'll have to manually bind it.)
	1. Install SDL2 dev libraries:
		https://github.com/libsdl-org/SDL/releases
	2. Extract to `C:\SDL2`
	3. Set Environment Variables:
		go to cmd(admin):
			setx SDL2-2.28.5DIR "C:\SDL2-2.28.5"
			If setx SDL2DIR doesn't work, manually add C:\SDL2-2.28.5\lib\x64 to the System PATH.
	
Ensure Rust Uses the MSVC Toolchain
On Windows, Rust needs the MSVC (Microsoft Visual C++) toolchain.

Check your Rust version with:
rustc --version --verbose

If you see gnu instead of msvc, switch to MSVC:
rustup default stable-x86_64-pc-windows-msvc

Then reinstall SDL2 bindings:
cargo install sdl2

Major factors for successfully enabling sdl2 features:
  1. Copy the lib files of SDL2 and paste them into 
    C:\Users\some_username\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\x86_64-pc-windows-msvc\lib 

    and

    C:\Users\some_username\.cargo\registry\src\index.crates.io-6f17d22bba15001f\windows_x86_64_msvc-0.52.6\lib
  
  2. Copy the SDL2.dll from the sdl2 extracted folder and paste it into the cwd of the project.


# Fan'fuqing'tastic, ADB is sending a different format (not RGB24, maybe YUV420), if not YUV420 I'm pretty much screwed.

I'll just start converting RGB TO YUV420, let's see what happens

Well, SDL2 does not support YUV420 directly in Rust, I'll just manually convert it (YUV420 TO RGB) bcs I'm a Red Power Ranger (I think I'm sociopath)

ADB was sending a compressed PNG file, I decoded it before sending it to sdl2

Needed to crop the window size, Adjust SDL2 Window & Aspect Ratio

==========================================================================================================

Starting MirrOx...
ADB Version: Android Debug Bridge version 1.0.41
Version 35.0.2-12147458
Installed as C:\scrcpy\adb.exe
Running on Windows 10.0.26120

Connected devices:
- 13725638470015P (device) [USB] | Manufacturer: vivo | Model: V2059
Device: V2059 | Battery: Current Battery Service state:
  AC powered: false
  USB powered: true
  Wireless powered: false
  Max charging current: 0
  Max charging voltage: 0
  Charge counter: 1606000
  engine: 0
  soc decimal: 0
  adapter power: 0
  board temp status: 0
  low bat status: 0
  reverse wl chg status: 0
  reverse wl chg exception: 0
  chg shut vbat: 3200
  status: 2
  health: 2
  present: true
  level: 86
  scale: 100
  voltage: 4367
  temperature: 315
  technology: Li-poly | Uptime: 23:07:42 up 24 days,  8:07,  0 users,  load average: 22.00, 21.68, 21.78
PS D:\Projects\MirrOx> 

==========================================================================================================

# Phase 1: Core ADB & Device Communication (Current Stage)
- I've already implemented:

check_adb → Check if ADB is installed

list_devices → List connected devices

run_shell_command → Execute ADB shell commands

extract_battery_level → Parse battery info

Fixed ADB Pull Issues:

  Ensure correct file paths for pulling files

Implement error handling if a file is missing

Implement Device Selection:

  Get a list of connected devices dynamically

  Allow the user to choose a device to mirror

Improve Logging & Error Handling:

  Handle ADB failures more gracefully

Add logs for debugging (use log crate)

# Phase 2: Implement Screen Mirroring
- Major Tasks:

Capture Device Screen via ADB

Use adb exec-out screencap -p to get a raw image

Parse it into an image format (PNG/JPEG) in Rust

Stream Images to the Frontend

Convert screenshots into a video stream

Use a WebSocket or raw TCP connection for real-time updates
    - Plan
    Continuously capture screenshots using ADB.

    Convert them into a video stream (we'll start with rapid sequential images).

    Send images to the frontend using a WebSocket or TCP.




TODO: Next Steps (To-Do):




Keyboard & Mouse Input Support

Send touch/mouse inputs via adb shell input tap X Y

Implement basic keyboard input handling



# Phase 3: Optimize for Performance
- Next Enhancements:

Reduce Latency

Use a more efficient method than screencap (e.g., ADB raw framebuffer access)

Implement caching & frame compression

GPU Acceleration

Utilize Rust’s GPU libraries (like wgpu) for rendering

Cross-Platform Support

Ensure it works on Windows, Linux, and Mac



# Phase 4: Build a UI (Optional)
- Frontend Choices:

TUI (Terminal UI) → Use ratatui for CLI mirroring

GUI (Graphical UI) → Use egui or a web-based UI with Tauri