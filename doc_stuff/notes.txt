# scrcpy working:

MediaProjection API (Android 5+)
    Scrcpy uses the MediaProjection API, which is the official way to capture the screen.
    This API provides a virtual display, which Scrcpy captures and encodes.

H.264 / H.265 Hardware Encoding (Faster than Raw Frames)
    Scrcpy does not send raw frames (like screencap does, which is slow).
    Instead, it compresses frames using the phone’s hardware encoder (MediaCodec) before sending them over ADB.

Efficient ADB Data Transfer
    Instead of saving frames as PNG/JPEG, Scrcpy streams an H.264 video over ADB.
    It uses an efficient ADB socket connection to minimize latency.

Decoding & Displaying on PC
    On the PC, Scrcpy decodes the H.264 stream using FFmpeg or OpenGL and renders it in real-time.

------------------------------------------------------------------------------------------
Feature	            screencap (What MirrOx Uses Now)	Scrcpy
------------------------------------------------------------------------------------------
Frame Format	    Raw PNG/JPEG (Large Size)	        H.264 Video Stream (Compressed)
Encoding Method	    None (Huge Data Size)	            Hardware Encoding (Efficient)
Transfer Method	    ADB Pull (Slow)	                    Socket Streaming (Fast)
Latency	            High (~1s delay)	                Low (<50ms)
------------------------------------------------------------------------------------------

# Minicap

* Third-party library (not part of Android's official APIs).
* Uses Android's private SurfaceFlinger API to capture frames.
* Requires root access on some devices.
* Faster than screencap, but less efficient than MediaProjection.
* Used in older screen mirroring tools (before MediaProjection became available).

# MediaProjection API (Official Android API)

* Official Android API (available since Android 5.0 - Lollipop).
* Allows apps to capture the screen without root.
* Used by Scrcpy & other modern mirroring tools.
* More efficient and fully supported by Android.
* Can leverage hardware encoding for low-latency streaming.

------------------------------------------------------------------------------------------------------------
Feature	            Minicap	                                            MediaProjection API
------------------------------------------------------------------------------------------------------------
Official API	    No (Unofficial)	                                    Yes (Google API)
Root Required?	    Some devices need root	                            No root needed
Performance	        Fast, but not as efficient as MediaProjection	    Faster, supports hardware encoding
Compatibility	    Works on most devices (but may break on updates)	Works on all devices Android 5+
Used by Scrcpy?	    No	                                                Yes
------------------------------------------------------------------------------------------------------------

Since Minicap is outdated and sometimes requires root, it's not the best choice.

Instead, we should use the MediaProjection API + H.264 encoding (like Scrcpy).

This will greatly reduce latency and improve performance.



mirrox-server CHECK:

gradlew.bat buildMirroxJar 

jar tf build/libs/mirrox_server-1.0.jar

adb push build/libs/mirrox_server-1.0.jar /data/local/tmp/  

adb exec-out app_process / com.mirrox.server.MainActivity > frame.h264

adb shell CLASSPATH=/data/local/tmp/mirrox_server-1.0.jar app_process / com.mirrox.server.MirroxServer

adb logcat -c
adb logcat | grep mirrox

(run adb logcat > log.txt in bash then run the app_process)

=======================================================================================================================================

## Why MainActivity as main in the jar pushing fails!!!!!
app_process is meant for running headless Java classes.

MainActivity extends android.app.Activity, which requires a full Android app context and must be launched by the system.

Since we’re launching a .jar, there’s no AndroidManifest, no APK, and no system context, so the Activity fails to launch and causes Aborted.

-----------------------------------------------------------------------------------------------------------------------------------------------

The .jar built with Java may not be dexified for Android. But app_process needs DEX format classes.
# Convert to DEX format (Android build tools required)

    mkdir build\dex
    "C:\Users\Sampreet\AppData\Local\Android\Sdk\build-tools\35.0.0\d8.bat" --output=build/dex build/libs/mirrox_server-1.0.jar

    This will produce a classes.dex file inside build/dex/

    Package the dex into a new JAR
        cd build/dex
        jar cf mirrox_server.dex.jar classes.dex

    adb push mirrox_server.dex.jar /data/local/tmp/
    adb shell CLASSPATH=/data/local/tmp/mirrox_server.dex.jar app_process / com.mirrox.server.StartMirrox


"""
$ adb logcat | grep mirrox
04-12 13:32:36.370 32613 32613 W ziparchive: Unable to open '/data/local/tmp/mirrox_server.dex.dm': No such file or directory
04-12 13:32:36.415 32613 32613 D AndroidRuntime: Calling main entry com.mirrox.server.StartMirrox
"""
    Unable open warning is ok, and it is not needed in out case, so don't worry


------------------------------------------------------------------------------------------------------------------------------------------------


14/04/2025

MediaProjection requires rooted android device, hence the plan has changed:

    I must use a fake package name like "com.mirrox.shell" — it doesn’t need to be installed.
    UID 2000 is the shell UID, which has permission when launched via adb shell.

Direct MediaProjection is not working, I'll just smartly put in an API something like scrcpy does.