1. Connect & Communicate via ADB (USB)
 Set up Rust code to invoke ADB commands via std::process::Command

 Detect connected Android device using adb devices

 Push server binary (Android side) to /data/local/tmp/mirrox-server

 Start server on Android via adb shell (e.g., CLASSPATH=... app_process ...)

 Forward port from device to host using adb forward tcp:PORT tcp:PORT (optional if using sockets)


2. Android Server (Headless)
 Run a minimal headless Android app/service (no UI) that:

 Requests MediaProjection permission

 Captures screen using MediaProjection + MediaCodec

 Encodes to H.264 stream

 Sends output through stdout (preferred) or socket (fallback)


This can be an executable app_process class like scrcpy does.


3. Rust Client: Start & Receive Stream
 Use adb exec-out or adb shell to start server and read stdout stream

 Parse raw H.264 video stream

 Decode using ffmpeg, gstreamer, or a custom decoder in Rust

 Render using sdl2, wgpu, or pixels crate


4. Input Control (Keyboard/Mouse)
 Capture mouse/keyboard input on the host

 Translate inputs to ADB shell commands:

adb shell input tap x y

adb shell input keyevent KEYCODE

 Implement touch simulation support for drag/scroll


5. (Optional) Recording / Screenshot Support
 Add support to save the H.264 stream to a .mp4 file

 Enable screenshot capture on host (ffmpeg frame extract or SDL snapshot)


6. Optimization & Stability
 Implement framerate limit / resolution scaling

 Handle disconnections and reconnections

 Add logs and graceful error handling

 Add command-line arguments: resolution, bitrate, device selection